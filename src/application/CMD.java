package application;

public enum CMD {
	
	//BYTE-ORIENTED FILE REGISTER OPERATIONS
	ADDWF(0b00011100000000,0b11111100000000,"ADDWF"),
	ANDWF(0b00010100000000,0b11111100000000,"ANDWF"),
	CLRF(0b00000110000000,0b11111111000000,"CLRF"),
	CLRW(0b00000100000000,0b11111111000000,"CLRW"),
	COMF(0b00100100000000,0b11111100000000,"COMF"),
	DECF(0b00001100000000,0b11111100000000,"DECF"),
	DECFSZ(0b00101100000000,0b11111100000000,"DECFSZ"),
	INCF(0b00101000000000,0b11111100000000,"INCF"),
	INCFSZ(0b00111100000000,0b11111100000000,"INCFSZ"),
	IORWF(0b00010000000000,0b11111100000000,"IORWF"),
	MOVF(0b00100000000000,0b11111100000000,"MOVF"),
	MOVWF(0b00000010000000,0b11111110000000,"MOVWF"),
	NOP(0b00000000000000,0b111111100111111,"NOP"),
	RLF( 0b00110100000000,0b11111100000000,"RLF"),
	RRF( 0b00110000000000,0b11111100000000,"RRF"),
	SUBWF(0b00001000000000,0b11111100000000,"SUBWF"),
	SWAPF(0b00111000000000,0b11111100000000,"SWAPF"),
	XORWF(0b00011000000000,0b11111100000000,"XORWF"),
	
	//BIT-ORIENTED FILE REGISTER OPERATIONS
	BCF( 0b01000000000000,0b11110000000000,"BCF"),
	BSF( 0b01010000000000,0b11110000000000,"BSF"),
	BTFSC ( 0b01100000000000,0b11110000000000,"BTFSC"),
	BTFSS( 0b01110000000000,0b11110000000000,"BTFSS"),
	
	//LITERAL AND CONTROL OPERATIONS
	ADDLW(0b11111000000000,0b11111000000000,"ADDLW"),
	ANDLW( 0b11100100000000,0b11111100000000,"ANDLW"),
	CALL( 0b10000000000000,0b11100000000000,"CALL"),
	CLRWDT( 0b00000001100100,0b11111111111111,"CLRWDT"),
	GOTO( 0b10100000000000,0b11100000000000,"GOTO"),
	IORLW( 0b11100000000000,0b11111100000000,"IORLW"),
	MOVLW( 0b11000000000000,0b11110000000000,"MOVLW"),
	RETFIE( 0b00000000001001,0b11111111111111,"RETFIE"),
	RETLW( 0b11010000000000,0b11110000000000,"RETLW"),
	RETURN( 0b00000000001000,0b11111111111111,"RETURN"),
	SLEEP( 0b00000001100011,0b11111111111111,"SLEEP"),
	SUBLW( 0b11110000000000,0b11111000000000,"SUBLW"),
	XORLW( 0b11101000000000,0b11111100000000,"XORLW");


	private final int bitID;
    private final int bitMask;
    private final String name;
    
    

    CMD( int bitID,int bitMask, String name) {
        this.bitID = bitID;
        this.bitMask = bitMask;
        this.name = name;
    }
    
    public boolean isMnemonic(int intCMD) {
    	
    	/* f√ºrs Debuggen
    	System.out.println("intCMD = "+intCMD);
		System.out.println("bitmask = "+bitMask);
		System.out.println("bitID = "+bitID);
		System.out.println("intCMD &  bitmask= "+(intCMD & bitMask));
    	 */

    	 

    	if((intCMD & bitMask) == bitID) {
    		return true;
    	}
    	
		return false;
    	
    }

    public int getBitMask() {
        return bitMask;
    }
    
    public int getComplementedBitmask() { // invertierte Bitmaske um die Werte rauszufiltern
    	return CMDUtility.get_HIGHEST_VAL()-bitMask;
    }
    
    public String getName() {
        return name;
    }
}